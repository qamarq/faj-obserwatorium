generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Tickets {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    timestamp        DateTime  @default(now())
    paymentID        String    
    paymentSecret    String   
    paymentStatus    String    
    paymentAmount    Int       
    paymentCurrency  String    
    buyerName        String    
    ticketData       String
    buyerEmail       String    
}

model Account {
    id                 String  @id @default(auto()) @map("_id") @db.ObjectId
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?  
    access_token       String?  
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  
    session_state      String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id                    String                   @id @default(auto()) @map("_id") @db.ObjectId
    name                  String?
    email                 String?                  @unique
    emailVerified         DateTime?
    image                 String?
    password              String?
    accounts              Account[]
    passkey               Boolean                  @default(false)
    createdAt   DateTime                           @default(now())
    updatedAt   DateTime                           @updatedAt
}

enum ReservationType {
    GROUP_SHORT_PL
    GROUP_SHORT_EN
    GROUP_FULL_PL
    GROUP_FULL_EN
    GROUP_EDUCATIONAL_WORKSHOP_PL
    GROUP_EVENING_OBSERVATION_PL
    GROUP_POP_SCIENCE_LECTURE_PL
    INDIVIDUAL_NORMAL_PL
}

model Reservation {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt        DateTime  @default(now())
    type             ReservationType
    date             String
    hour             String
    participants     Int
    accepted         Boolean   @default(false)
    payed            Boolean   @default(false)
    amount           Float
    name             String
    email            String
    phone            String
    needReceipt      Boolean   @default(false)
    observatoryDayId String
    observatoryDay   ObservatoryOpenDay @relation(fields: [observatoryDayId], references: [id])
}

model ObservatoryOpenDay {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt        DateTime  @default(now())
    date             String
    hour             String
    maxParticipants  Int
    reservations     Reservation[]
}

model DisabledDatesReservation {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt        DateTime  @default(now())
    date             String
}